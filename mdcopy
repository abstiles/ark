#!/bin/bash

# The following options enable a kind of strict mode: exit script when a
# command fails, and fail when accessing undefined variables.
set -Eu
set -o pipefail

# Set an error handler to log the location of an error before exiting
function _exit_err {
	local retval=$1
	echo "ERROR: $BASH_SOURCE: line $BASH_LINENO: $BASH_COMMAND" >&2
	exit "$retval"
}; trap '_exit_err $?' ERR

readonly USAGE="USAGE:
$0 [<options>] [--] [<input filename>]
$0 --help

Copy markdown text as rich text. If no filename is provided, read from STDIN.

Options:
    --help, -h           Prints this usage information and exits.
"

function usage { printf "%s\n" "$USAGE"; }

# Print the current verbosity level (default 0)
function verbosity { printf "%d" "${verbosity:-0}"; }

# Logs an error, then terminates with nonzero exit code
function die { error "$@"; exit 1; }

# Unconditionally logs message to stderr
function error { log -l "$(verbosity)" "$@" >&2; }

# Log messages to stdout based on verbosity setting. Hidden by default.
function log {
	local level=1;
	if [[ $1 == -l ]]; then level=$(printf %d "$2"); shift 2; fi
	if (( $# == 1 )); then set -- "%b" "$1"; fi
	# shellcheck disable=SC2059
	if (( level <= $(verbosity) )); then printf "$1\n" "${@:2}"; fi
}

# Process options, filter out positional arguments
declare -a positional_args
arg_flags=
while (( $# )); do
	case $1 in
		--help|-h)    usage; exit ;;
		--verbose|-v) verbosity=$(( $(verbosity) + 1 )) ;;
		--verbosity)  verbosity=$(printf %d "$2"); shift ;;
		--) shift; break ;;
		# Handle GNU-style long options with arguments, e.g., "--example=value"
		--?*=*) set -- "${1%%=*}" "${1#*=}" "${@:2}"; continue ;;
		# Handle POSIX-style short option chaining, e.g., "-xvf"
		-[^-]?*) if [[ ${1:1:1} =~ ["${arg_flags-}"] ]]
		         then set -- "${1:0:2}" "${1:2}" "${@:2}"
		         else set -- "${1:0:2}" "-${1:2}" "${@:2}"
		         fi; continue ;;
		-?*) die "ERROR: Unrecognized option $1\n$(usage)" ;;
		*) positional_args+=("$1") ;;
	esac
	shift
done
# Handle the positional arguments
if (( ${#positional_args[@]} > 0 )); then
	set -- "${positional_args[@]}" "$@"
fi
# Don't pollute the global namespace; remove globals used in arg processing
unset arg_flags
unset positional_args

function main {
	echo "html { font-family: Calibri; font-size: 14px }" > /tmp/mdcopy.css
	local html
	html=$(TMPDIR='/tmp' mktemp -t 'mdcopy_html')
	pandoc -S <(cat "$@") -c '/tmp/mdcopy.css' > "$html"
	textutil -convert rtf -stdout -- "$html" \
		| pbcopy
	rm "$html"
	rm /tmp/mdcopy.css
}

main "$@"
